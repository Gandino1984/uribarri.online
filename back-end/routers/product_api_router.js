import { Router } from "express";
import productApiController from "../controllers/product/product_api_controller.js";
import productController from '../controllers/product/product_controller.js';
import { handleProductImageUpload } from '../middleware/ProductUploadMiddleware.js';

const router = Router();

router.get("/", productApiController.getAll);

router.get("/active-by-shop-id/:id_shop", productApiController.getActiveByShopId);

router.get("/inactive-by-shop-id/:id_shop", productApiController.getInactiveByShopId);

// Original route to get all products (active and inactive) from a shop
router.get("/by-shop-id/:id_shop", productApiController.getByShopId);

router.get("/by-type/:type_product", productApiController.getByType);

router.get("/on-sale", productApiController.getOnSale);

router.get("/by-id/:id_product", productApiController.getById);

router.get("/by-country/:country_product", productApiController.getByCountry);

router.get("/by-locality/:locality_product", productApiController.getByLocality);

router.post("/toggle-active", productApiController.toggleActiveStatus);

router.post("/create", productApiController.create);

//update: Fixed to use the correct dbPath from middleware instead of constructing wrong path
router.post('/upload-image', handleProductImageUpload, async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({
        error: 'No file uploaded'
      });
    }

    const productId = req.headers['x-product-id'];
    
    if (!productId) {
      return res.status(400).json({
        error: 'Product ID is required'
      });
    }

    //update: Use the dbPath that was set by the middleware
    // This path is already in the correct format: assets/images/shops/<shop_name>/product_images/<filename>
    const relativePath = req.file.dbPath;

    if (!relativePath) {
      return res.status(500).json({
        error: 'Database path not generated by middleware'
      });
    }

    console.log(`Saving product image path to database: ${relativePath}`);

    // Update the product's image_product field in the database using the controller
    const result = await productController.updateProductImage(productId, relativePath);

    if (result.error) {
      //update: Clean up the uploaded file if database update fails
      try {
        const fs = await import('fs/promises');
        await fs.unlink(req.file.path);
        console.log('Cleaned up file after database update failure');
      } catch (unlinkError) {
        console.error('Error deleting uploaded file:', unlinkError);
      }
      
      return res.status(500).json({
        error: 'Failed to update product with new image',
        details: result.error
      });
    }

    console.log('Product updated successfully with new image');
    console.log('Image path in database:', relativePath);

    // Return the updated image path
    res.json({
      error: null,
      data: {
        image_product: relativePath
      },
      success: 'Imagen de producto subida y guardada correctamente'
    });

  } catch (err) {
    console.error('Error in product image upload route:', err);
    
    //update: Try to clean up the file if there was an error
    if (req.file && req.file.path) {
      try {
        const fs = await import('fs/promises');
        await fs.unlink(req.file.path);
      } catch (unlinkError) {
        console.error('Error cleaning up file after error:', unlinkError);
      }
    }
    
    res.status(500).json({
      error: 'Error processing product image upload',
      details: err.message
    });
  }
});

router.patch("/update", productApiController.update);

router.delete("/remove-by-id/:id_product", productApiController.removeById);

router.delete('/delete-image/:id_product', productApiController.deleteImage);

router.post("/verify-product-name", productApiController.verifyProductName);

export default router;