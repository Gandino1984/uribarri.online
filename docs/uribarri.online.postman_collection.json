{
	"info": {
		"_postman_id": "4b8572f6-ce7b-467b-89dc-63f50daeba4e",
		"name": "uribarri.online",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Scripts\" tab**\n\nAdding tests to your requests can help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/fa30ea0a-373d-4545-a668-e7b283cca343/aW1hZ2UucG5n\" width=\"2162\" height=\"1530\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n    \n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "35137767"
	},
	"item": [
		{
			"name": "user",
			"item": [
				{
					"name": "Get all users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "localhost:3007/user",
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "remove user by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "file",
							"file": {}
						},
						"url": {
							"raw": "localhost:3007/user/remove/:id_user",
							"host": [
								"localhost"
							],
							"port": "3007",
							"path": [
								"user",
								"remove",
								":id_user"
							],
							"query": [
								{
									"key": "id_user",
									"value": "",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "id_user",
									"value": "1"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "user create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name_user\": \"JuliÃ¡n Andino\",\n    \"pass_user\": \"0000\",\n    \"location_user\":\"Uribarri\",\n    \"type_user\":\"user\",\n    \"email_user\":\"julian@jln.com\",\n    \"image_user\":null\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "localhost:3007/user/create",
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Get user by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id_user\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "localhost:3007/user/byId",
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "user update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n       \"id_user\": 1,\n            \"name_user\": \"german\",\n            \"email_user\": \"andinogerman@gmail.com\",\n            \"pass_user\": \"$2b$05$9bc8qpf01Vy8vQMZK3GTTuGP98ejoht6B6HTkYTDQj1ZUMBnuD7L6\",\n            \"location_user\": \"uribarri\",\n            \"type_user\": \"user\",\n            \"image_user\": null,\n            \"calification_user\": 5,\n            \"contributor_user\": false,\n            \"age_user\": 18,\n            \"email_verified\": true,\n            \"verification_token\": null,\n            \"verification_token_expires\": null,\n            \"is_manager\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "localhost:3007/user/update",
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Get user by name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name_user\":\"german andino\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "localhost:3007/user/details",
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Get shops by userId (owner)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id_user\":2\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "localhost:3007/shop/by-user-id",
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "user login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name_user\": \"german andino 1\",\n    \"pass_user\": \"0000\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "localhost:3007/user/login",
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "user register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name_user\": \"german andino\",\n    \"pass_user\": \"0000\",\n    \"location_user\":\"TravesÃ­a Ciudad JardÃ­n 7, 7a derecha\", \n    \"type_user\":\"seller\",\n    \"email_user\":\"german@jln.com\",\n    \"image_user\":null\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "localhost:3007/user/register",
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "create seller user and shop",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name_user\": \"Kebab Matiko\",\n  \"pass_user\": \"1234\",\n  \"location_user\": \"Calle Matiko 14, Uribarri\",\n  \"name_shop\": \"Kebab Matiko\",\n  \"location_shop\": \"Calle Matiko 14, Uribarri\",\n  \"type_shop\": \"Restaurante\",\n  \"subtype_shop\": \"Kebab\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "localhost:3007/user/seller/create",
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "New Request",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				}
			]
		},
		{
			"name": "shop",
			"item": [
				{
					"name": "Get all shops",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "localhost:3007/shop",
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Remove shop by shopid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3007/shop/remove-by-id/:id_shop",
							"host": [
								"localhost"
							],
							"port": "3007",
							"path": [
								"shop",
								"remove-by-id",
								":id_shop"
							],
							"variable": [
								{
									"key": "id_shop",
									"value": "4"
								}
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Remove shop by shopId with products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3007/shop/remove-by-id/with-products/:id_shop",
							"host": [
								"localhost"
							],
							"port": "3007",
							"path": [
								"shop",
								"remove-by-id",
								"with-products",
								":id_shop"
							],
							"variable": [
								{
									"key": "id_shop",
									"value": "1"
								}
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Get all shops by type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type_shop\":\"Bienestar\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "localhost:3007/shop/by-type",
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Get shops by user id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id_user\":\"1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "localhost:3007/shop/by-user-id",
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Get products by shopId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id_shop\":1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "localhost:3007/product/by-shop-id",
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Get all types of shops",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "localhost:3007/shop/types-of-shops",
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "shop create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name_shop\": \"n\",\n    \"location_shop\":\"bilbao\",\n    \"type_shop\":\"Entretenimiento\",\n    \"subtype_shop\":\"varios\",\n    \"id_user\":2,\n    \"calification_shop\":3,\n     \"image_shop\":null\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "localhost:3007/shop/create",
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				}
			]
		},
		{
			"name": "product",
			"item": [
				{
					"name": "Get all products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "localhost:3007/product",
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "product create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n            \"name_product\": \"Pedrata cordero\",\n            \"price_product\": \"5.00\",\n            \"discount_product\": 1,\n            \"season_product\": \"Todo el AÃ±o\",\n            \"calification_product\": 1,\n            \"type_product\": \"Kebab\",\n            \"stock_product\": 20,\n            \"info_product\": \"Kebab de pollo o cordero.\",\n            \"id_shop\": 1\n        }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "localhost:3007/product/create",
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Get product by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3007/product//by-id/:id_product",
							"host": [
								"localhost"
							],
							"port": "3007",
							"path": [
								"product",
								"",
								"by-id",
								":id_product"
							],
							"variable": [
								{
									"key": "id_product",
									"value": "2"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "product update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n          \"id_product\": 1,\n            \"name_product\": \"prod1\",\n            \"price_product\": \"12.00\",\n            \"discount_product\": 1,\n            \"season_product\": \"Verano\",\n            \"calification_product\": 0,\n            \"type_product\": \"Servicio\",\n            \"subtype_product\": \"AsesorÃ­a\",\n            \"sold_product\": 0,\n            \"info_product\": \"no\",\n            \"id_shop\": 1,\n            \"image_product\": null,\n            \"second_hand\": 1,\n            \"expiration_product\": \"2025-03-27T00:00:00.000Z\",\n            \"surplus_product\": 1,\n            \"country_product\": \"Albania\",\n            \"locality_product\": \"no\",\n            \"active_product\":1,\n            \"creation_product\": \"2025-03-26T07:21:14.000Z\"\n        }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "localhost:3007/product/update",
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "product remove by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n            \"id_product\": 1,\n            \"name_product\": \"Kebab cordero\",\n            \"price_product\": \"66.00\",\n            \"discount_product\": 0,\n            \"season_product\": \"Todo el AÃ±o\",\n            \"calification_product\": 5,\n            \"type_product\": \"Kebab\",\n            \"stock_product\": 10,\n            \"info_product\": \"Kebab cordero.\",\n            \"id_shop\": 1\n        }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3007/product//remove-by-id/:id_product",
							"host": [
								"localhost"
							],
							"port": "3007",
							"path": [
								"product",
								"",
								"remove-by-id",
								":id_product"
							],
							"variable": [
								{
									"key": "id_product",
									"value": "1"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "product by shop id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n            \"id_product\": 1,\n            \"name_product\": \"Kebab cordero\",\n            \"price_product\": \"66.00\",\n            \"discount_product\": 0,\n            \"season_product\": \"Todo el AÃ±o\",\n            \"calification_product\": 5,\n            \"type_product\": \"Kebab\",\n            \"stock_product\": 10,\n            \"info_product\": \"Kebab cordero.\",\n            \"id_shop\": 1\n        }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3007/product//by-shop-id/:id_shop",
							"host": [
								"localhost"
							],
							"port": "3007",
							"path": [
								"product",
								"",
								"by-shop-id",
								":id_shop"
							],
							"variable": [
								{
									"key": "id_shop",
									"value": "8"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Get products by type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3007/product/by-type/:type_product",
							"host": [
								"localhost"
							],
							"port": "3007",
							"path": [
								"product",
								"by-type",
								":type_product"
							],
							"variable": [
								{
									"key": "type_product",
									"value": "kebab"
								}
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Get products on sale",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "localhost:3007/product/on-sale",
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				}
			]
		},
		{
			"name": "provider",
			"item": [
				{
					"name": "Get all providers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "localhost:3007/provider",
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				}
			]
		},
		{
			"name": "ip",
			"item": [
				{
					"name": "IP check",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "file",
							"file": {}
						},
						"url": {
							"raw": "localhost:3001/ip/check/",
							"host": [
								"localhost"
							],
							"port": "3001",
							"path": [
								"ip",
								"check",
								""
							],
							"query": [
								{
									"key": "id_user",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "shop type",
			"item": [
				{
					"name": "get all shop types",
					"request": {
						"method": "GET",
						"header": [],
						"url": "localhost:3007/type"
					},
					"response": []
				},
				{
					"name": "get all shop subtypes by type ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": "localhost:3007/type/2/subtypes/"
					},
					"response": []
				},
				{
					"name": "create shop type",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name_type\": \"AlimentaciÃ³n\",\n    \"createdby_type\": \"German Andino\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "localhost:3007/type/create"
					},
					"response": []
				},
				{
					"name": "patch type by ID",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"verified_type\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "localhost:3007/type/update/6"
					},
					"response": []
				},
				{
					"name": "delete type by ID",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "localhost:3007/type/remove/3"
					},
					"response": []
				}
			]
		},
		{
			"name": "shop subtype",
			"item": [
				{
					"name": "get all shop subtypes",
					"request": {
						"method": "GET",
						"header": [],
						"url": "localhost:3007/subtype"
					},
					"response": []
				},
				{
					"name": "create shop subtype",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name_subtype\":\"Kebab\",\n    \"id_type\": 1,\n    \"createdby_subtype\":\"German Andino\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "localhost:3007/subtype/create"
					},
					"response": []
				},
				{
					"name": "patch subtype by ID",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\n{\n    \"verified_subtype\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "localhost:3007/subtype/update/3"
					},
					"response": []
				},
				{
					"name": "remove shop subtype",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name_subtype\":\"subtipo 1\",\n    \"id_type\": 1,\n    \"createdby_subtype\":\"german\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "localhost:3007/subtype/remove/3"
					},
					"response": []
				},
				{
					"name": "remove all shop subtypes by type ID",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name_subtype\":\"subtipo 1\",\n    \"id_type\": 1,\n    \"createdby_subtype\":\"german\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "localhost:3007/subtype/remove-by-type/1"
					},
					"response": []
				}
			]
		},
		{
			"name": "product category",
			"item": [
				{
					"name": "get all product categories",
					"request": {
						"method": "GET",
						"header": [],
						"url": "localhost:3007/product-category"
					},
					"response": []
				},
				{
					"name": "get product categories by shop ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": "localhost:3007/product-category/shop/1"
					},
					"response": []
				},
				{
					"name": "get all product subcategories by category ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": "localhost:3007/product-category/1/subcategories"
					},
					"response": []
				},
				{
					"name": "create product category",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name_category\": \"Durum\",\n    \"createdby_category\": \"German Andino\",\n    \"id_type\": 1\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "localhost:3007/product-category/create"
					},
					"response": []
				},
				{
					"name": "patch category by ID",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"verified_category\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "localhost:3007/product-category/update/25"
					},
					"response": []
				},
				{
					"name": "delete category by ID",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "localhost:3007/product-category/remove/2"
					},
					"response": []
				}
			]
		},
		{
			"name": "product subcategory",
			"item": [
				{
					"name": "get all product subcategories",
					"request": {
						"method": "GET",
						"header": [],
						"url": "localhost:3007/product-subcategory"
					},
					"response": []
				},
				{
					"name": "create product subcategory",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name_subcategory\": \"Cordero\",\n    \"id_category\": 1,\n    \"createdby_subcategory\": \"German Andino\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "localhost:3007/product-subcategory/create"
					},
					"response": []
				},
				{
					"name": "patch subcategory by ID",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\n{\n    \"verified_subcategory\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "localhost:3007/product-subcategory/update/351"
					},
					"response": []
				},
				{
					"name": "delete subcategory by ID",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "localhost:3007/product-subcategory/remove/1"
					},
					"response": []
				}
			]
		},
		{
			"name": "package",
			"item": [
				{
					"name": "Get all packages",
					"request": {
						"method": "GET",
						"header": [],
						"url": "localhost:3007/package/all"
					},
					"response": []
				}
			]
		},
		{
			"name": "type-category",
			"item": [
				{
					"name": "get all type-category relations",
					"request": {
						"method": "GET",
						"header": [],
						"url": "localhost:3007/type-category"
					},
					"response": []
				}
			]
		},
		{
			"name": "order",
			"item": [
				{
					"name": "get all orders",
					"request": {
						"method": "GET",
						"header": [],
						"url": "localhost:3007/order"
					},
					"response": []
				}
			]
		},
		{
			"name": "organization",
			"item": [
				{
					"name": "participants",
					"item": [
						{
							"name": "get all participants",
							"request": {
								"method": "GET",
								"header": [],
								"url": "localhost:3007/participant"
							},
							"response": []
						},
						{
							"name": "set participant manager",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id_org\":\"1\",\n    \"id_user\":\"1\",\n    \"is_manager\":true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "localhost:3007/participant/set-manager/2"
							},
							"response": []
						}
					]
				},
				{
					"name": "get all organizations",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id_user\":\"1\",\n    \"name_org\":\"organizaciÃ³n de German\",\n    \"scope_org\":\"\",\n    \"image_org\":\"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "localhost:3007/organization"
					},
					"response": []
				},
				{
					"name": "organization create",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id_user\":\"1\",\n    \"name_org\":\"organizaciÃ³n de German\",\n    \"scope_org\":\"\",\n    \"image_org\":\"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "localhost:3007/organization/create"
					},
					"response": []
				},
				{
					"name": "delete organization by id",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "localhost:3007/organization/remove-by-id/1"
					},
					"response": []
				},
				{
					"name": "update orgaanization",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id_organization\": 1,\n    \"id_user\": 1,\n    \"name_org\": \"organizaciÃ³n 1\",\n    \"scope_org\": \"social\",\n    \"image_org\":\"\",\n    \"org_approved\":true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "localhost:3007/organization/update/"
					},
					"response": []
				}
			]
		},
		{
			"name": "publication",
			"item": [
				{
					"name": "get all publications",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "New Request Copy",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "localhost:3007"
		}
	]
}